name: Update Ephemeral Env CI/CD
on:
  pull_request:
    branches: [ master ]
    types: [synchronize]

env:
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  BASE_STACK_NAME: ${{ secrets.BASE_STACK_NAME }}
  EXCLUDE_EPHEMERAL_CDN: ${{ secrets.EXCLUDE_EPHEMERAL_CDN }}
  REUSABLE_CDN: ${{ secrets.REUSABLE_CDN }}

jobs:
  Build-Deploy-Frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Build frontend
        run: |
          npm install
          echo "Getting api stack: ${GITHUB_HEAD_REF#*/}-$BASE_STACK_NAME-API"
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name "${GITHUB_HEAD_REF#*/}-$BASE_STACK_NAME-API" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiURL`].OutputValue' \
            --output text)|| API_URL=$(aws cloudformation describe-stacks \
            --stack-name "$BASE_STACK_NAME-API" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiURL`].OutputValue' \
            --output text)
          echo "Building frontend with API URL: $API_URL"
          REACT_APP_BASE_URL="$API_URL" REACT_APP_BRANCH="${GITHUB_HEAD_REF}" npm run-script build

      - name: Invalidate Ephemeral CDN Cache
        if: env.EXCLUDE_EPHEMERAL_CDN != 'true'
        run: |
          aws configure set preview.cloudfront true
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name "${GITHUB_HEAD_REF#*/}-$BASE_STACK_NAME-StaticSite" \
          --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' \
          --output text)
          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*"

      - name: Invalidate Reusable CDN Cache
        if: env.REUSABLE_CDN == 'true'
        run: |
          aws configure set preview.cloudfront true
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name "$BASE_STACK_NAME-StaticSite" \
          --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' \
          --output text)
          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*"

      - name: Deploy frontend
        run: |
          BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "${GITHUB_HEAD_REF#*/}-$BASE_STACK_NAME-StaticSite" \
            --query 'Stacks[0].Outputs[?OutputKey==`Bucket`].OutputValue' \
            --output text)
          aws s3 sync ./build/ s3://"$BUCKET" --delete --acl public-read
